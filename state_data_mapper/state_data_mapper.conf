[

#     StateConfig(
#         state="Mississippi",
#         state_abbreviation="MS",
#         source_filepath="case_data/MS_for_Hub_09.09.21.xlsx",
#         target_filepath="output/MS_schools.xlsx",
#         source_sheet_name="MS Schools Only",
#         filter_values_file="filters/MS_schools_filter.xlsx",
#         filter_values_file_fuzzy_match_on=["SchoolName"],
#         nces_id_lookup_file="nces_lookups/MS_schools_nces_lookup.xlsx",
#         nces_id_lookup_file_fuzzy_match_on=["SchoolName"],
#         column_mappings=[
#             ColumnMapping(
#                 target_column="StateName",
#                 dtype=pd.StringDtype(),
#                 constant="Mississippi"),
#             ColumnMapping(
#                 target_column="StateAbbrev",
#                 dtype=pd.StringDtype(),
#                 constant="MS"),
#             ColumnMapping(
#                 target_column="DataLevel",
#                 dtype=pd.StringDtype(),
#                 constant="School"),
#             ColumnMapping(
#                 target_column="SchoolName",
#                 source_column="School Name",
#                 dtype=pd.StringDtype()),
#             ColumnMapping(
#                 target_column="NewCasesStaff",
#                 source_column="New Staff Cases- Current Week",
#                 dtype="object",
#                 converter_dict={
#                     "1-5": "1-5",
#                 }),
#             ColumnMapping(
#                 target_column="NewCasesStudents",
#                 source_column="New Student Cases- Current Week",
#                 dtype="object",
#                 converter_dict={
#                     "1-5": "1-5",
#                 }),
#             ColumnMapping(
#                 target_column="_CumulativeCasesStaff1",
#                 source_column="Total Staff Cases Since Start of School",
#                 dtype=pd.StringDtype(),
#                 is_temporary=False
#             ),
#             ColumnMapping(
#                 target_column="_CumulativeCasesStaff2",
#                 source_column="Total Staff Cases Since Jan 1, 2021",
#                 dtype=pd.StringDtype(),
#                 is_temporary=False
#             ),
#             ColumnMapping(
#                 target_column="CumulativeCasesStaff",
#                 dtype="object",
#                 calculation=lambda row: (
#                     "1-" if (
#                         "<" in row["_CumulativeCasesStaff1"] and
#                         "<" in row["_CumulativeCasesStaff2"]
#                     ) else (
#                         (str(int(float(row["_CumulativeCasesStaff2"])) + 1) + "-") if (
#                             "<" in row["_CumulativeCasesStaff1"] and
#                             "<" not in row["_CumulativeCasesStaff2"]
#                         ) else (
#                             (str(int(float(row["_CumulativeCasesStaff1"])) + 1) + "-") if (
#                                 "<" not in row["_CumulativeCasesStaff1"] and
#                                 "<" in row["_CumulativeCasesStaff2"]
#                             ) else ""
#                         )
#                     )
#                 ) + str(
#                     ((int(float(row["_CumulativeCasesStaff1"].replace("<", ""))) - 1)
#                         if "<" in row["_CumulativeCasesStaff1"]
#                         else int(float(row["_CumulativeCasesStaff1"]))) +
#                     ((int(float(row["_CumulativeCasesStaff2"].replace("<", ""))) - 1)
#                         if "<" in row["_CumulativeCasesStaff2"]
#                         else int(float(row["_CumulativeCasesStaff2"])))
#                 )
#             ),
#             ColumnMapping(
#                 target_column="TimePeriodInterval",
#                 dtype=pd.StringDtype(),
#                 constant="Weekly"),
#             ColumnMapping(
#                 target_column="TimePeriodEnd",
#                 source_column="Report Date",
#                 dtype="datetime64"),
#             ColumnMapping(
#                 target_column="TimePeriodStart",
#                 dtype="datetime64[ns]",
#                 calculation=lambda row: row["TimePeriodEnd"] - \
#                 pd.to_timedelta(7, unit="d")
#             ),
#         ],
#     ), 
    StateConfig(
        state="Washington DC",
        state_abbreviation="DC",
        source_filepath="case_data/DC.xlsx",
        target_filepath="output/DC_districts.xlsx",
        source_sheet_name="Sheet1",
        column_mappings=[
            ColumnMapping(
                target_column="StateName",
                dtype=pd.StringDtype(),
                constant="Washington DC"),
            ColumnMapping(
                target_column="StateAbbrev",
                dtype=pd.StringDtype(),
                constant="DC"),
            ColumnMapping(
                target_column="DataLevel",
                dtype=pd.StringDtype(),
                constant="District"),
            ColumnMapping(
                target_column="DistrictName",
                dtype=pd.StringDtype(),
                constant="District of Columbia Public Schools"),
            ColumnMapping(
                target_column="NCESDistrictID",
                dtype=pd.StringDtype(),
                constant="1100030"),
            ColumnMapping(
                target_column="NewCasesStaff",
                source_column="New Staff COVID Cases During Reporting Period",
                dtype=pd.Int64Dtype()),
            ColumnMapping(
                target_column="NewCasesStudents",
                source_column="New Student COVID Cases During Reporting Period",
                dtype=pd.Int64Dtype()),
            ColumnMapping(
                target_column="TimePeriodInterval",
                dtype=pd.StringDtype(),
                constant="Biweekly"),
            ColumnMapping(
                target_column="TimePeriodStart",
                source_column="TimePeriodStart",
                dtype="datetime64"),
            ColumnMapping(
                target_column="TimePeriodEnd",
                source_column="Last date of data reported",
                dtype="datetime64",

            ),
        ],
    ),
    StateConfig(
        state="Texas",
        state_abbreviation="TX",
        source_filepath="case_data/TX_Data_Posting.xlsx",
        target_filepath="output/TX_schools.xlsx",
        source_sheet_names_list=[
            "Wave 16", "Wave 15", "Wave 14", "Wave 13", "Wave 12", 
            "Wave 11", "Wave 10", "Wave 9", "Wave 8", "Wave 7"],
        filter_values_file="filters/TX_schools_filter.xlsx",
        filter_values_file_fuzzy_match_on=["SchoolName", "DistrictName", "City"],
        nces_id_lookup_file="nces_lookups/TX_schools_nces_lookup.xlsx",
        nces_id_lookup_file_fuzzy_match_on=["SchoolName", "DistrictName", "City"],
        column_mappings=[
            ColumnMapping(
                target_column="StateName",
                dtype=pd.StringDtype(),
                constant="Texas"),
            ColumnMapping(
                target_column="StateAbbrev",
                dtype=pd.StringDtype(),
                constant="TX"),
            ColumnMapping(
                target_column="DataLevel",
                dtype=pd.StringDtype(),
                constant="School"),
            ColumnMapping(
                target_column="SchoolName",
                source_column="SchoolName",
                dtype=pd.StringDtype(),
                dropna=True),
            ColumnMapping(
                target_column="DistrictName",
                source_column="DistrictName",
                dtype=pd.StringDtype()),
            ColumnMapping(
                target_column="City",
                source_column="City",
                dtype=pd.StringDtype(),
                is_temporary=False),
            ColumnMapping(
                target_column="NewCasesStudentsWeek1",
                source_column="NewStudentCases_week1",
                dtype=pd.Int64Dtype(),
                na_values=["*"],
                is_temporary=False),
            ColumnMapping(
                target_column="NewCasesStudentsWeek2",
                source_column="NewStudentCases_week2",
                dtype=pd.Int64Dtype(),
                na_values=["*"],
                is_temporary=False),
            ColumnMapping(
                target_column="NewCasesStudents",
                dtype="object",
                calculation=lambda row: ((
                    row["NewCasesStudentsWeek1"]
                    if pd.notna(row["NewCasesStudentsWeek1"])
                    else 0) + (
                    row["NewCasesStudentsWeek2"]
                    if pd.notna(row["NewCasesStudentsWeek2"])
                    else 0))
                    if (pd.notna(row["NewCasesStudentsWeek1"]) or
                        pd.notna(row["NewCasesStudentsWeek2"]))
                    else None
            ),
            ColumnMapping(
                target_column="NewCasesStaffWeek1",
                source_column="NewStaffCases_week1",
                dtype=pd.Int64Dtype(),
                na_values=["*"],
                is_temporary=False),
            ColumnMapping(
                target_column="NewCasesStaffWeek2",
                source_column="NewStaffCases_week2",
                dtype=pd.Int64Dtype(),
                na_values=["*"],
                is_temporary=False),
            ColumnMapping(
                target_column="NewCasesStaff",
                dtype="object",
                calculation=lambda row: ((
                    row["NewCasesStaffWeek1"] if pd.notna(row["NewCasesStaffWeek1"]) else 0) + (
                    row["NewCasesStaffWeek2"] if pd.notna(row["NewCasesStaffWeek2"]) else 0))
                    if (pd.notna(row["NewCasesStaffWeek1"]) or
                        pd.notna(row["NewCasesStaffWeek2"]))
                    else None
           ),
           ColumnMapping(
                target_column="CumulativeCasesStudents",
                source_column="Cumulative_StudentCases",
                dtype=pd.Int64Dtype(),
                na_values=["*"]),
           ColumnMapping(
                target_column="CumulativeCasesStaff",
                source_column="Cumulative_StaffCases",
                dtype=pd.Int64Dtype(),
                na_values=["*"]),
            ColumnMapping(
                target_column="TimePeriodInterval",
                dtype=pd.StringDtype(),
                constant="Biweekly"),
            ColumnMapping(
                target_column="_year",
                source_column="year",
                dtype="object",
                converter=lambda value: str(int(float(value))),
                is_temporary=False),
            ColumnMapping(
                target_column="_wave",
                source_column="wave",
                dtype=pd.StringDtype(),
                is_temporary=False),
            ColumnMapping(
                target_column="TimePeriodStart",
                dtype="datetime64",
                calculation=lambda row: row["_year"] + "/" + row["_wave"].split("-")[0].strip()
            ),
            ColumnMapping(
                target_column="TimePeriodEnd",
                dtype="datetime64",
                calculation=lambda row: row["_year"] + "/" + row["_wave"].split("-")[1].strip()
            ),
        ],
    ),
    StateConfig(
        state="Iowa",
        state_abbreviation="IA",
        source_filepath="case_data/Iowa_dist_school.xlsx",
        target_filepath="output/IA_schools.xlsx",
        source_sheet_name="Iowa (schools)",
        filter_values_file="filters/IA_schools_filter.xlsx",
        filter_values_file_fuzzy_match_on=["SchoolName", "DistrictName"],
        nces_id_lookup_file="nces_lookups/IA_schools_nces_lookup.xlsx",
        nces_id_lookup_file_fuzzy_match_on=["SchoolName", "DistrictName"],
        column_mappings=[
            ColumnMapping(
                target_column="StateName",
                dtype=pd.StringDtype(),
                constant="Iowa"),
            ColumnMapping(
                target_column="StateAbbrev",
                dtype=pd.StringDtype(),
                constant="IA"),
            ColumnMapping(
                target_column="DataLevel",
                dtype=pd.StringDtype(),
                constant="School"),
            ColumnMapping(
                target_column="SchoolName",
                source_column="School",
                dtype=pd.StringDtype(),
                filter_values=[
                    "Cedar Rapids Virtual Academy",
                ]),
              ColumnMapping(
                target_column="DistrictName",
                source_column="District",
                dtype=pd.StringDtype()),
            ColumnMapping(
                target_column="ActiveCasesStudents",
                source_column="Current Positive Students",
                dtype=pd.Int64Dtype()),
            ColumnMapping(
                target_column="ActiveCasesStaff",
                source_column="Current Positive Staff",
                dtype=pd.Int64Dtype()),
            ColumnMapping(
                target_column="ActiveCasesUnknown",
                source_column="Current Positive Unknown",
                dtype=pd.Int64Dtype()),
            ColumnMapping(
                target_column="ActiveCasesCombined",
                source_column="Current Positives (All Types)",
                dtype=pd.Int64Dtype()),
            ColumnMapping(
                target_column="CumulativeCasesStudents",
                source_column="Total Positive Students",
                dtype=pd.Int64Dtype()),
            ColumnMapping(
                target_column="CumulativeCasesStaff",
                source_column="Total Positive Staff",
                dtype=pd.Int64Dtype()),
            ColumnMapping(
                target_column="CumulativeCasesUnknown",
                source_column="Total Positive Unknown",
                dtype=pd.Int64Dtype()),
            ColumnMapping(
                target_column="CumulativeCasesCombined",
                source_column="Total Positives (All Types)",
                dtype=pd.Int64Dtype()),
            ColumnMapping(
                target_column="TimePeriodInterval",
                dtype=pd.StringDtype(),
                constant="Daily"),
            ColumnMapping(
                target_column="TimePeriodEnd",
                source_column="Report Date",
                dtype="datetime64"),
            ColumnMapping(
                target_column="TimePeriodStart",
                dtype="datetime64[ns]",
                calculation=lambda row: row["TimePeriodEnd"]

            ),
        ],
    ),
    StateConfig(
        state="Iowa",
        state_abbreviation="IA",
        source_filepath="case_data/Iowa_dist_school.xlsx",
        target_filepath="output/IA_districts.xlsx",
        source_sheet_name="Iowa (districts)",
        filter_values_file="filters/IA_districts_filter.xlsx",
        filter_values_file_fuzzy_match_on=["DistrictName"],
        nces_id_lookup_file="nces_lookups/IA_districts_nces_lookup.xlsx",
        nces_id_lookup_file_fuzzy_match_on=["DistrictName"],
        column_mappings=[
            ColumnMapping(
                target_column="StateName",
                dtype=pd.StringDtype(),
                constant="Iowa"),
            ColumnMapping(
                target_column="StateAbbrev",
                dtype=pd.StringDtype(),
                constant="IA"),
            ColumnMapping(
                target_column="DataLevel",
                dtype=pd.StringDtype(),
                constant="District"),
            ColumnMapping(
                target_column="SchoolName",
                source_column="School",
                dtype=pd.StringDtype()),
            ColumnMapping(
                target_column="DistrictName",
                source_column="District",
                dtype=pd.StringDtype(),
                filter_values=[
                    "Cedar Rapids Virtual Academy",
                ]),
            ColumnMapping(
                target_column="ActiveCasesStudents",
                source_column="Current Positive Students",
                dtype=pd.Int64Dtype()),
            ColumnMapping(
                target_column="ActiveCasesStaff",
                source_column="Current Positive Staff",
                dtype=pd.Int64Dtype()),
            ColumnMapping(
                target_column="ActiveCasesUnknown",
                source_column="Current Positive Unknown",
                dtype=pd.Int64Dtype()),
            ColumnMapping(
                target_column="ActiveCasesCombined",
                source_column="Current Positives (All Types)",
                dtype=pd.Int64Dtype()),
            ColumnMapping(
                target_column="CumulativeCasesStudents",
                source_column="Total Positive Students",
                dtype=pd.Int64Dtype()),
            ColumnMapping(
                target_column="CumulativeCasesStaff",
                source_column="Total Positive Staff",
                dtype=pd.Int64Dtype()),
            ColumnMapping(
                target_column="CumulativeCasesUnknown",
                source_column="Total Positive Unknown",
                dtype=pd.Int64Dtype()),
            ColumnMapping(
                target_column="CumulativeCasesCombined",
                source_column="Total Positives (All Types)",
                dtype=pd.Int64Dtype()),
            ColumnMapping(
                target_column="TimePeriodInterval",
                dtype=pd.StringDtype(),
                constant="Daily"),
            ColumnMapping(
                target_column="TimePeriodEnd",
                source_column="Report Date",
                dtype="datetime64"),
            ColumnMapping(
                target_column="TimePeriodStart",
                dtype="datetime64[ns]",
                calculation=lambda row: row["TimePeriodEnd"]

            ),
        ],
    ),
    StateConfig(
        state="Montana",
        state_abbreviation="MT",
        source_filepath="case_data/Montana.xlsx",
        target_filepath="output/MT_schools.xlsx",
        source_sheet_name="Table 3",
        filter_values_file="filters/MT_schools_filter.xlsx",
        filter_values_file_fuzzy_match_on=["SchoolName", "County"],
        nces_id_lookup_file="nces_lookups/MT_schools_nces_lookup.xlsx",
        nces_id_lookup_file_fuzzy_match_on=["SchoolName", "County"],
        column_mappings=[
            ColumnMapping(
                target_column="StateName",
                dtype=pd.StringDtype(),
                constant="Montana"),
            ColumnMapping(
                target_column="StateAbbrev",
                dtype=pd.StringDtype(),
                constant="MT"),
            ColumnMapping(
                target_column="DataLevel",
                dtype=pd.StringDtype(),
                constant="School"),
            ColumnMapping(
                target_column="SchoolName",
                source_column="School Name",
                dtype=pd.StringDtype()),
            ColumnMapping(
                target_column="County",
                source_column="County",
                dtype=pd.StringDtype(),
                is_temporary=False),
            ColumnMapping(
                target_column="ActiveCasesStaff",
                source_column="# staff positive",
                dtype=pd.Int64Dtype()),
            ColumnMapping(
                target_column="ActiveCasesStudents",
                source_column="# students positive",
                dtype=pd.Int64Dtype()),
            ColumnMapping(
                target_column="ActiveCasesCombined",
                source_column="Total # cases associated with school",
                dtype=pd.Int64Dtype()),
            ColumnMapping(
                target_column="TimePeriodInterval",
                dtype=pd.StringDtype(),
                constant="Weekly"),
            ColumnMapping(
                target_column="TimePeriodEnd",
                source_column="Report Date",
                dtype="datetime64"),
            ColumnMapping(
                target_column="TimePeriodStart",
                dtype="datetime64[ns]",
                calculation=lambda row: row["TimePeriodEnd"] - \
                pd.to_timedelta(7, unit="d")
            ),
        ],
    ),
    StateConfig(
        state="New York",
        state_abbreviation="NY",
        source_filepath="case_data/NewYork_CaseData.xlsx",
        target_filepath="output/NY_schools.xlsx",
        source_sheet_name="New York",
        filter_values_file="filters/NY_schools_filter.xlsx",
        filter_values_file_fuzzy_match_on=["SchoolName", "DistrictName", "City"],
        nces_id_lookup_file="nces_lookups/NY_schools_nces_lookup.xlsx",
        nces_id_lookup_file_fuzzy_match_on=["SchoolName", "DistrictName", "City"],
        column_mappings=[
            ColumnMapping(
                target_column="StateName",
                dtype=pd.StringDtype(),
                constant="New York"),
            ColumnMapping(
                target_column="StateAbbrev",
                dtype=pd.StringDtype(),
                constant="NY"),
            ColumnMapping(
                target_column="DataLevel",
                dtype=pd.StringDtype(),
                constant="School"),
            ColumnMapping(
                target_column="SchoolName",
                source_column="SchoolName",
                dtype=pd.StringDtype()),
            ColumnMapping(
                target_column="DistrictName",
                source_column="DistrictName",
                dtype=pd.StringDtype()),
            ColumnMapping(
                target_column="City",
                source_column="City",
                dtype=pd.StringDtype(),
                is_temporary=False),
            ColumnMapping(
                target_column="Address",
                source_column="Address",
                dtype=pd.StringDtype(),
                is_temporary=False),
            ColumnMapping(
                target_column="NewCasesStudents",
                source_column="student_cases",
                dtype=pd.Int64Dtype()),
            ColumnMapping(
                target_column="NewCasesStaff",
                source_column="staff_cases",
                dtype=pd.Int64Dtype()),
            ColumnMapping(
                target_column="TimePeriodInterval",
                dtype=pd.StringDtype(),
                constant="Biweekly"),
            ColumnMapping(
                target_column="TimePeriodStart",
                source_column="biweekly_date",
                dtype="datetime64"),
            ColumnMapping(
                target_column="TimePeriodEnd",
                source_column="TimePeriodEnd",
                dtype="datetime64",
                calculation=lambda row: row["TimePeriodStart"] + \
                pd.to_timedelta(13, unit="d")
            ),
        ],
    ),
    StateConfig(
        state="Indiana",
        state_abbreviation="IN",
        source_filepath="case_data/Indiana.xlsx",
        target_filepath="output/IN_schools.xlsx",
        source_sheet_name="Data for Indiana",
        filter_values_file="filters/IN_schools_filter.xlsx",
        filter_values_file_fuzzy_match_on=["SchoolName"],
        nces_id_lookup_file="nces_lookups/IN_schools_nces_lookup.xlsx",
        nces_id_lookup_file_fuzzy_match_on=["SchoolName"],
        column_mappings=[
            ColumnMapping(
                target_column="StateName",
                dtype=pd.StringDtype(),
                constant="Indiana"),
            ColumnMapping(
                target_column="StateAbbrev",
                dtype=pd.StringDtype(),
                constant="IN"),
            ColumnMapping(
                target_column="DataLevel",
                dtype=pd.StringDtype(),
                constant="School"),
            ColumnMapping(
                target_column="SchoolName",
                source_column="School Name",
                dtype=pd.StringDtype(),
                filter_values=[
                    "ACHIEVE VIRTUAL EDUCATION ACADEMY",
                    "SOUTH BEND VIRTUAL SCHOOL",
                    "VIGO VIRTUAL SCHOOL ACADEMY"
                ]),
            ColumnMapping(
                target_column="CumulativeCasesStudents",
                source_column="Student Cases (cumulative)",
                dtype="object",
                converter_dict={
                    "<5": "1-4",
                }),
            ColumnMapping(
                target_column="_CumulativeCasesStaff",
                source_column="Staff Cases (cululative)",
                dtype=pd.StringDtype(),
                is_temporary=False
            ),
            ColumnMapping(
                target_column="_CumulativeCasesTeachers",
                source_column="Teacher Cases (cululative)",
                dtype=pd.StringDtype(),
                is_temporary=False
            ),
            ColumnMapping(
                target_column="CumulativeCasesStaff",
                dtype="object",
                calculation=lambda row: (
                    "1-" if (
                        "<" in row["_CumulativeCasesStaff"] and
                        "<" in row["_CumulativeCasesTeachers"]
                    ) else (
                        (str(int(float(row["_CumulativeCasesTeachers"])) + 1) + "-") if (
                            "<" in row["_CumulativeCasesStaff"] and
                            "<" not in row["_CumulativeCasesTeachers"]
                        ) else (
                            (str(int(float(row["_CumulativeCasesStaff"])) + 1) + "-") if (
                                "<" not in row["_CumulativeCasesStaff"] and
                                "<" in row["_CumulativeCasesTeachers"]
                            ) else ""
                        )
                    )
                ) + str(
                    ((int(float(row["_CumulativeCasesStaff"].replace("<", ""))) - 1)
                        if "<" in row["_CumulativeCasesStaff"]
                        else int(float(row["_CumulativeCasesStaff"]))) +
                    ((int(float(row["_CumulativeCasesTeachers"].replace("<", ""))) - 1)
                        if "<" in row["_CumulativeCasesTeachers"]
                        else int(float(row["_CumulativeCasesTeachers"])))
                )
            ),
            ColumnMapping(
                target_column="TimePeriodInterval",
                dtype=pd.StringDtype(),
                constant="Weekly"),
            ColumnMapping(
                target_column="TimePeriodEnd",
                source_column="Report Date",
                dtype="datetime64"),
            ColumnMapping(
                target_column="TimePeriodStart",
                dtype="datetime64[ns]",
                calculation=lambda row: row["TimePeriodEnd"] - \
                pd.to_timedelta(7, unit="d")
            ),
        ],
    ),
    StateConfig(
        state="Florida",
        state_abbreviation="FL",
        source_filepath="case_data/FL_Data_All_Waves.xlsx",
        target_filepath="output/FL_schools.xlsx",
        source_sheet_name="All Data",
        filter_values_file="filters/FL_schools_filter.xlsx",
        filter_values_file_fuzzy_match_on=["SchoolName", "DistrictName"],
        nces_id_lookup_file="nces_lookups/FL_schools_nces_lookup.xlsx",
        nces_id_lookup_file_fuzzy_match_on=["SchoolName", "DistrictName"],
        column_mappings=[
            ColumnMapping(
                target_column="StateName",
                dtype=pd.StringDtype(),
                constant="Florida"),
            ColumnMapping(
                target_column="StateAbbrev",
                dtype=pd.StringDtype(),
                constant="FL"),
            ColumnMapping(
                target_column="DataLevel",
                dtype=pd.StringDtype(),
                constant="School"),
            ColumnMapping(
                target_column="SchoolName",
                source_column="SchoolName",
                dtype=pd.StringDtype()),
            ColumnMapping(
                target_column="DistrictName",
                source_column="DistrictName",
                dtype=pd.StringDtype()),
            ColumnMapping(
                target_column="ActiveCasesCombined",
                source_column="totalcases",
                dtype=pd.Int64Dtype()),
            ColumnMapping(
                target_column="ActiveCasesStudents",
                source_column="student_cases",
                dtype=pd.Int64Dtype()),
            ColumnMapping(
                target_column="_ActiveCasesStaff",
                source_column="staff_cases",
                dtype=pd.Int64Dtype(),
                is_temporary=False),
            ColumnMapping(
                target_column="_ActiveCasesTeachers",
                source_column="teacher_cases",
                dtype=pd.Int64Dtype(),
                is_temporary=False),
            ColumnMapping(
                target_column="ActiveCasesStaff",
                dtype=pd.Int64Dtype(),
                calculation=lambda row: ((
                row["_ActiveCasesStaff"] if pd.notna(row["_ActiveCasesStaff"]) else 0) + (
                row["_ActiveCasesTeachers"] if pd.notna(row["_ActiveCasesTeachers"]) else 0))
                if (pd.notna(row["_ActiveCasesStaff"]) or pd.notna(row["_ActiveCasesTeachers"]))
                else None
            ),
            ColumnMapping(
                target_column="ActiveCasesUnknown",
                source_column="unknown",
                dtype=pd.Int64Dtype()),
            ColumnMapping(
                target_column="TimePeriodInterval",
                dtype=pd.StringDtype(),
                constant="Biweekly"),
            ColumnMapping(
                target_column="TimePeriodStart",
                source_column="biweekly_date",
                dtype="datetime64"),
            ColumnMapping(
                target_column="TimePeriodEnd",
                dtype="datetime64[ns]",
                calculation=lambda row: row["TimePeriodStart"] + \
                pd.to_timedelta(14, unit="d")
            ),
        ],
    ),
    StateConfig(
        state="Illinois",
        state_abbreviation="IL",
        source_filepath="case_data/Illinois.xlsx",
        target_filepath="output/IL_schools.xlsx",
        source_sheet_name="Data for Illinois",
        filter_values_file="filters/IL_schools_filter.xlsx",
        filter_values_file_fuzzy_match_on=["SchoolName"],
        nces_id_lookup_file="nces_lookups/IL_schools_nces_lookup.xlsx",
        nces_id_lookup_file_fuzzy_match_on=["SchoolName"],
        column_mappings=[
            ColumnMapping(
                target_column="StateName",
                dtype=pd.StringDtype(),
                constant="Illinois"),
            ColumnMapping(
                target_column="StateAbbrev",
                dtype=pd.StringDtype(),
                constant="IL"),
            ColumnMapping(
                target_column="DataLevel",
                dtype=pd.StringDtype(),
                constant="School"),
            ColumnMapping(
                target_column="SchoolName",
                source_column="School",
                dtype=pd.StringDtype()),
            ColumnMapping(
                target_column="ActiveCasesCombined",
                source_column="Cases",
                dtype="object",
                converter_dict={
                    "5-10 (Staff & Students)": "5-10",
                    "16+ (Students)": "16+",
                    "16+ (Staff & Students)": "16+",
                    "5-10 (Students)": "5-10",
                    "11-16 (Students)": "11-16",
                    "11-16 (Other)": "11-16",
                    "5-10 (Staff)": "5-10",
                    "11-16 (Staff & Students)": "11-16",
                    "11-16 Cases (Staff & Students)": "11-16",
                    "5-10 (Staff & Students": "5-10"
                }),
            ColumnMapping(
                target_column="TimePeriodInterval",
                dtype=pd.StringDtype(),
                constant="Weekly"),
            ColumnMapping(
                target_column="TimePeriodEnd",
                source_column="Report Date",
                dtype="datetime64"),
            ColumnMapping(
                target_column="TimePeriodStart",
                dtype="datetime64[ns]",
                calculation=lambda row: row["TimePeriodEnd"] - \
                pd.to_timedelta(7, unit="d")
            ),
        ],
    ),
    StateConfig(
        state="Idaho",
        state_abbreviation="ID",
        source_filepath="case_data/Idaho.xlsx",
        target_filepath="output/ID_schools.xlsx",
        source_sheet_name="Idaho",
        filter_values_file="filters/ID_schools_filter.xlsx",
        filter_values_file_fuzzy_match_on=["SchoolName"],
        nces_id_lookup_file="nces_lookups/ID_schools_nces_lookup.xlsx",
        nces_id_lookup_file_fuzzy_match_on=["SchoolName"],
        column_mappings=[
            ColumnMapping(
                target_column="StateName",
                dtype=pd.StringDtype(),
                constant="Idaho"),
            ColumnMapping(
                target_column="StateAbbrev",
                dtype=pd.StringDtype(),
                constant="ID"),
            ColumnMapping(
                target_column="DataLevel",
                dtype=pd.StringDtype(),
                constant="School"),
            ColumnMapping(
                target_column="SchoolName",
                source_column="SchoolName",
                dtype=pd.StringDtype(),
                filter_values=[
                    "Another Choice Virtual Charter",
                ]),
            ColumnMapping(
                target_column="TimePeriodInterval",
                source_column="TimePeriodInterval",
                dtype=pd.StringDtype()),
            ColumnMapping(
                target_column="TimePeriodStart",
                source_column="TimePeriodStart",
                dtype="datetime64"),
            ColumnMapping(
                target_column="TimePeriodEnd",
                source_column="TimePeriodEnd",
                dtype="datetime64"),
            ColumnMapping(
                target_column="NewCasesCombined",
                source_column="NewCases",
                dtype="object",
                converter_dict={
                    "1+": "1+",
                    "2+": "2+",
                    "3+": "3+",
                    "4+": "4+",
                    "5+": "5+",
                    "6+": "6+",
                    "7+": "7+",
                },
                na_values=["`", "-", "n/a"]),
            ColumnMapping(
                target_column="CumulativeCasesCombined",
                source_column="CumulativeCases",
                dtype="object",
                converter_dict={
                    "1+": "1+",
                    "2+": "2+",
                    "3+": "3+",
                    "4+": "4+",
                    "5+": "5+",
                    "6+": "6+",
                    "7+": "7+",
                    "`1": "1",
                    "1+": "1+",
                    "10+": "10+",
                    "104+": "104+",
                    "107+": "107+",
                    "109+": "109+",
                    "11+": "11+",
                    "114+": "114+",
                    "12+": "12+",
                    "121+": "121+",
                    "122+": "122+",
                    "13+": "13+",
                    "14+": "14+",
                    "15+": "15+",
                    "16+": "16+",
                    "17+": "17+",
                    "18+": "18+",
                    "19+": "19+",
                    "2+": "2+",
                    "20+": "20+",
                    "21+": "21+",
                    "22+": "22+",
                    "23+": "23+",
                    "24+": "24+",
                    "25+": "25+",
                    "26+": "26+",
                    "27+": "27+",
                    "28+": "28+",
                    "29+": "29+",
                    "3+": "3+",
                    "30+": "30+",
                    "31+": "31+",
                    "32+": "32+",
                    "33+": "33+",
                    "34+": "34+",
                    "35+": "35+",
                    "36+": "36+",
                    "37+": "37+",
                    "38+": "38+",
                    "4+": "4+",
                    "40+": "40+",
                    "41+": "41+",
                    "42+": "42+",
                    "43+": "43+",
                    "44+": "44+",
                    "45+": "45+",
                    "46+": "46+",
                    "47+": "47+",
                    "48+": "48+",
                    "49+": "49+",
                    "5+": "5+",
                    "50+": "50+",
                    "51+": "51+",
                    "52+": "52+",
                    "53+": "53+",
                    "54+": "54+",
                    "55+": "55+",
                    "56+": "56+",
                    "57+": "57+",
                    "58+": "58+",
                    "59+": "59+",
                    "6+": "6+",
                    "60+": "60+",
                    "61+": "61+",
                    "62+": "62+",
                    "63+": "63+",
                    "64+": "64+",
                    "65+": "65+",
                    "66+": "66+",
                    "67+": "67+",
                    "68+": "68+",
                    "69+": "69+",
                    "7+": "7+",
                    "70+": "70+",
                    "71+": "71+",
                    "72+": "72+",
                    "73+": "73+",
                    "75+": "75+",
                    "77+": "77+",
                    "78+": "78+",
                    "79+": "79+",
                    "8+": "8+",
                    "80+": "80+",
                    "81+": "81+",
                    "82+": "82+",
                    "84+": "84+",
                    "86+": "86+",
                    "87+": "87+",
                    "9+": "9+",
                    "90+": "90+",
                    "93+": "93+",
                    "94+": "94+",
                    "96+": "96+",
                    "98+": "98+",
                    "99+": "99+"

                },
                na_values=["`", "-", "n/a", ","],

            ),
        ],
    ),


    StateConfig(
        state="Rhode Island",
        state_abbreviation="RI",
        source_filepath="case_data/Rhode Island.xlsx",
        target_filepath="output/RI_schools.xlsx",
        source_sheet_name="Rhode Island Data",
        filter_values_file="filters/RI_schools_filter.xlsx",
        filter_values_file_fuzzy_match_on=["SchoolName", "DistrictName"],
        nces_id_lookup_file="nces_lookups/RI_schools_nces_lookup.xlsx",
        nces_id_lookup_file_fuzzy_match_on=["SchoolName", "DistrictName"],
        column_mappings=[
            ColumnMapping(
                target_column="StateName",
                dtype=pd.StringDtype(),
                constant="Rhode Island"),
            ColumnMapping(
                target_column="StateAbbrev",
                dtype=pd.StringDtype(),
                constant="RI"),
            ColumnMapping(
                target_column="DataLevel",
                dtype=pd.StringDtype(),
                constant="School"),
            ColumnMapping(
                target_column="DistrictName",
                source_column="LEA",
                dtype=pd.StringDtype()),
            ColumnMapping(
                target_column="SchoolName",
                source_column="School Name",
                dtype=pd.StringDtype(),
                filter_values=[
                    "Other*",
                    "Village Green Virtual"
                ]),
            ColumnMapping(
                target_column="NewCasesStudents",
                source_column="In-Person Cases in Past 7 Days- Students",
                dtype="object",
                converter_dict={
                    "Fewer than five": "1-4",
                    "5 to 9": "5-9",
                    "10 to 14": "10-14",
                    "15 to 19": "15-19"
                }),
            ColumnMapping(
                target_column="NewCasesStaff",
                source_column="In-Person Cases in Past 7 Days- Staff",
                dtype="object",
                converter_dict={
                    "Fewer than five": "1-4",
                    "5 to 9": "5-9",
                    "10 to 14": "10-14",
                    "15 to 19": "15-19"
                }),
            ColumnMapping(
                target_column="NewCasesCombined",
                source_column="In-Person Cases in Past 7 Days- Staff and Students",
                dtype="object",
                converter_dict={
                    "Fewer than five": "1-4",
                    "5 to 9": "5-9",
                    "10 to 14": "10-14",
                    "15 to 19": "15-19",
                }
            ),
            ColumnMapping(
                target_column="CumulativeCasesStudents",
                source_column="In-Person Cumulative Cases- Students",
                dtype="object",
                converter_dict={
                    "Fewer than five": "1-4",
                    "5 to 9": "5-9",
                    "10 to 14": "10-14",
                    "15 to 19": "15-19"
                }
            ),
            ColumnMapping(
                target_column="CumulativeCasesStaff",
                source_column="In-Person Cumulative Cases- Staff",
                dtype="object",
                converter_dict={
                    "Fewer than five": "1-4",
                    "5 to 9": "5-9",
                    "10 to 14": "10-14",
                    "15 to 19": "15-19",
                }
            ),
            ColumnMapping(
                target_column="CumulativeCasesCombined",
                source_column="In-Person Cumulative Cases- Staff and Students Combined",
                dtype="object",
                converter_dict={
                    "Fewer than five": "1-4",
                    "5 to 9": "5-9",
                    "10 to 14": "10-14",
                    "15 to 19": "15-19"
                }),
            ColumnMapping(
                target_column="TimePeriodInterval",
                dtype=pd.StringDtype(),
                constant="Weekly"),
            ColumnMapping(
                target_column="TimePeriodEnd",
                source_column="Report Date",
                dtype="datetime64",
            ),
            ColumnMapping(
                target_column="TimePeriodStart",
                dtype="datetime64[ns]",
                calculation=lambda row: row["TimePeriodEnd"] - \
                pd.to_timedelta(7, unit="d")
            ),
        ],
    ),
    StateConfig(
        state="Nevada",
        state_abbreviation="NV",
        source_filepath="case_data/Nevada.xlsx",
        target_filepath="output/NV_schools.xlsx",
        source_sheet_name="Nevada",
        column_mappings=[
            ColumnMapping(
                target_column="StateName",
                dtype=pd.StringDtype(),
                constant="Nevada"),
            ColumnMapping(
                target_column="StateAbbrev",
                dtype=pd.StringDtype(),
                constant="NV"),
            ColumnMapping(
                target_column="DataLevel",
                dtype=pd.StringDtype(),
                constant="School"),
            ColumnMapping(
                target_column="SchoolName",
                source_column="SchoolName",
                dtype=pd.StringDtype()),
            ColumnMapping(
                target_column="DistrictName",
                source_column="DistrictName",
                dtype=pd.StringDtype()),
            ColumnMapping(
                target_column="NCESSchoolID1",
                source_column="NCESSchoolID1",
                dtype=pd.StringDtype(),
                is_temporary=False),
            ColumnMapping(
                target_column="NCESSchoolID2",
                source_column="NCESSchoolID2",
                dtype=pd.StringDtype(),
                is_temporary=False),
            ColumnMapping(
                target_column="NCESSchoolID3",
                source_column="NCESSchoolID3",
                dtype=pd.StringDtype(),
                is_temporary=False),
            ColumnMapping(
                target_column="NCESSchoolID",
                dtype="object",
                calculation=lambda row: str(int(float(row["NCESSchoolID1"]))).strip().zfill(12) +
                ("," + str(int(float(row["NCESSchoolID2"]))).strip().zfill(12)
                if pd.notna(row["NCESSchoolID2"]) else "") +
                ("," + str(int(float(row["NCESSchoolID3"]))).strip().zfill(12)
                if pd.notna(row["NCESSchoolID3"]) else "")
            ),
            ColumnMapping(
                target_column="NCESDistrictID",
                source_column="DistrictNCESID",
                dtype="object",
                converter=lambda value: str(int(float(value))).strip().zfill(7)),
            ColumnMapping(
                target_column="CumulativeCasesCombined",
                source_column="CumulativeCasesCombined",
                dtype=pd.Int64Dtype()),
            ColumnMapping(
                target_column="CumulativeCasesStudents",
                source_column="CumulativeCasesStudents",
                dtype=pd.Int64Dtype()),
            ColumnMapping(
                target_column="CumulativeCasesStaff",
                source_column="CumulativeCasesStaff",
                dtype=pd.Int64Dtype()),
            ColumnMapping(
                target_column="TimePeriodInterval",
                dtype=pd.StringDtype(),
                constant="Weekly"),
            ColumnMapping(
                target_column="TimePeriodStart",
                source_column="TimePeriodStart",
                dtype="datetime64"),
            ColumnMapping(
                target_column="TimePeriodEnd",
                source_column="TimePeriodEnd",
                dtype="datetime64",
            ),
        ],
    ),

    StateConfig(
        state="Virginia",
        state_abbreviation="VA",
        source_filepath="case_data/Virginia COVID school data from state.xlsx",
        target_filepath="output/VA_schools.xlsx",
        source_sheet_name="Use for Data Hub",
        filter_values_file="filters/VA_schools_filter.xlsx",
        filter_values_file_fuzzy_match_on=["SchoolName", "DistrictName"],
        nces_id_lookup_file="nces_lookups/VA_schools_nces_lookup.xlsx",
        nces_id_lookup_file_fuzzy_match_on=["SchoolName", "DistrictName"],
        column_mappings=[
            ColumnMapping(
                target_column="StateName",
                dtype=pd.StringDtype(),
                constant="Virginia"),
            ColumnMapping(
                target_column="StateAbbrev",
                dtype=pd.StringDtype(),
                constant="VA"),
            ColumnMapping(
                target_column="DataLevel",
                dtype=pd.StringDtype(),
                constant="School"),
            ColumnMapping(
                target_column="SchoolName",
                source_column="SchoolName",
                dtype=pd.StringDtype()),
            ColumnMapping(
                target_column="DistrictName",
                source_column="Locality",
                dtype=pd.StringDtype()),
            ColumnMapping(
                target_column="NewCasesCombined",
                source_column="NewCasesCombined",
                dtype=pd.Int64Dtype(),
                na_values=["*"]),
            ColumnMapping(
                target_column="TimePeriodInterval",
                dtype=pd.StringDtype(),
                constant="Monthly"),
            ColumnMapping(
                target_column="TimePeriodStart",
                source_column="TimePeriodStart",
                dtype="datetime64"),
            ColumnMapping(
                target_column="TimePeriodEnd",
                source_column="TimePeriodEnd",
                dtype="datetime64",
            ),
        ],
    ),
    StateConfig(
        state="Ohio",
        state_abbreviation="OH",
        source_filepath="case_data/Ohio.xlsx",
        target_filepath="output/OH_districts.xlsx",
        source_sheet_name="Clean Ohio Data_09.05.21",
        column_mappings=[
            ColumnMapping(
                target_column="StateName",
                dtype=pd.StringDtype(),
                constant="Ohio"),
            ColumnMapping(
                target_column="StateAbbrev",
                dtype=pd.StringDtype(),
                constant="OH"),
            ColumnMapping(
                target_column="DataLevel",
                dtype=pd.StringDtype(),
                constant="District"),
            ColumnMapping(
                target_column="DistrictName",
                source_column="DistrictName",
                dtype=pd.StringDtype()),
            ColumnMapping(
                target_column="NCESDistrictID",
                source_column="NCES District ID",
                dtype="object",
                converter=lambda value: str(int(float(value))).strip().zfill(7)),
            ColumnMapping(
                target_column="NewCasesStudents",
                source_column="New Student Cases This Week",
                dtype=pd.Int64Dtype(),
                na_values=["nan"]),
            ColumnMapping(
                target_column="CumulativeCasesStudents",
                source_column="Cumulative Student Cases",
                dtype=pd.Int64Dtype(),
                na_values=["nan"]),
            ColumnMapping(
                target_column="NewCasesStaff",
                source_column="New Staff Cases this Week",
                dtype=pd.Int64Dtype(),
                na_values=["nan"]),
            ColumnMapping(
                target_column="CumulativeCasesStaff",
                source_column="Cumulative Staff Cases",
                dtype=pd.Int64Dtype(),
                na_values=["nan"]),
            ColumnMapping(
                target_column="TimePeriodInterval",
                dtype=pd.StringDtype(),
                constant="Weekly"),
            ColumnMapping(
                target_column="TimePeriodStart",
                source_column="TimePeriodStart",
                dtype="datetime64"),
            ColumnMapping(
                target_column="TimePeriodEnd",
                source_column="TimePeriodEnd",
                dtype="datetime64",
            ),
        ],
    ),

    StateConfig(
        state="West Virginia",
        state_abbreviation="WV",
        source_filepath="case_data/West Virginia.xlsx",
        target_filepath="output/WV_schools.xlsx",
        source_sheet_name="West Virginia",
        filter_values_file="filters/WV_schools_filter.xlsx",
        filter_values_file_fuzzy_match_on=["SchoolName"],
        nces_id_lookup_file="nces_lookups/WV_schools_nces_lookup.xlsx",
        nces_id_lookup_file_fuzzy_match_on=["SchoolName"],
        column_mappings=[
            ColumnMapping(
                target_column="StateName",
                dtype=pd.StringDtype(),
                constant="West Virginia"),
            ColumnMapping(
                target_column="StateAbbrev",
                dtype=pd.StringDtype(),
                constant="WV"),
            ColumnMapping(
                target_column="DataLevel",
                dtype=pd.StringDtype(),
                constant="School"),
            ColumnMapping(
                target_column="SchoolName",
                source_column="School Name",
                dtype=pd.StringDtype()),
            ColumnMapping(
                target_column="ActiveCasesCombined",
                source_column="Total Positive Cases",
                dtype=pd.Int64Dtype()),
            ColumnMapping(
                target_column="TimePeriodInterval",
                dtype=pd.StringDtype(),
                constant="Biweekly"),
            ColumnMapping(
                target_column="TimePeriodEnd",
                source_column="Last Update",
                dtype="datetime64"),
            ColumnMapping(
                target_column="TimePeriodStart",
                dtype="datetime64[ns]",
                calculation=lambda row: row["TimePeriodEnd"] - \
                pd.to_timedelta(14, unit="d")
            ),
        ],
    ),

    StateConfig(
        state="Vermont",
        state_abbreviation="VT",
        source_filepath="case_data/Vermont.xlsx",
        target_filepath="output/VT_schools.xlsx",
        source_sheet_name="Vermont",
        filter_values_file="filters/VT_schools_filter.xlsx",
        filter_values_file_fuzzy_match_on=["SchoolName"],
        nces_id_lookup_file="nces_lookups/VT_schools_nces_lookup.xlsx",
        nces_id_lookup_file_fuzzy_match_on=["SchoolName"],
        column_mappings=[
            ColumnMapping(
                target_column="StateName",
                dtype=pd.StringDtype(),
                constant="Vermont"),
            ColumnMapping(
                target_column="StateAbbrev",
                dtype=pd.StringDtype(),
                constant="VT"),
            ColumnMapping(
                target_column="DataLevel",
                dtype=pd.StringDtype(),
                constant="School"),
            ColumnMapping(
                target_column="SchoolName",
                source_column="School Name",
                dtype=pd.StringDtype()),
            ColumnMapping(
                target_column="NewCasesCombined",
                source_column="Cases Reported in the Past 7 Days",
                dtype=pd.Int64Dtype()),
            ColumnMapping(
                target_column="CumulativeCasesCombined",
                source_column="Total Cases",
                dtype=pd.Int64Dtype()),
            ColumnMapping(
                target_column="TimePeriodInterval",
                dtype=pd.StringDtype(),
                constant="Weekly"),
            ColumnMapping(
                target_column="TimePeriodEnd",
                source_column="Report Date",
                dtype="datetime64"),
            ColumnMapping(
                target_column="TimePeriodStart",
                dtype="datetime64[ns]",
                calculation=lambda row: row["TimePeriodEnd"] - \
                pd.to_timedelta(7, unit="d")
            ),
        ],
    ),

    StateConfig(
        state="Utah",
        state_abbreviation="UT",
        source_filepath="case_data/Utah.xlsx",
        target_filepath="output/UT_districts.xlsx",
        source_sheet_name="Utah Data",
        filter_values_file="filters/UT_districts_filter.xlsx",
        filter_values_file_fuzzy_match_on=["DistrictName"],
        nces_id_lookup_file="nces_lookups/UT_districts_nces_lookup.xlsx",
        nces_id_lookup_file_fuzzy_match_on=["DistrictName"],
        column_mappings=[
            ColumnMapping(
                target_column="StateName",
                dtype=pd.StringDtype(),
                constant="Utah"),
            ColumnMapping(
                target_column="StateAbbrev",
                dtype=pd.StringDtype(),
                constant="UT"),
            ColumnMapping(
                target_column="DataLevel",
                dtype=pd.StringDtype(),
                constant="District"),
            ColumnMapping(
                target_column="DistrictName",
                source_column="School District",
                dtype=pd.StringDtype()),
            ColumnMapping(
                target_column="ActiveCasesCombined",
                source_column="Active Cases",
                dtype="object",
                converter_dict={
                    "<5": "1-4"
                }),
            ColumnMapping(
                target_column="CumulativeCasesCombined",
                source_column="Total Cases",
                dtype=pd.Int64Dtype()),
            ColumnMapping(
                target_column="TimePeriodInterval",
                dtype=pd.StringDtype(),
                constant="Daily"),
            ColumnMapping(
                target_column="TimePeriodEnd",
                source_column="Report Date",
                dtype="datetime64"),
            ColumnMapping(
                target_column="TimePeriodStart",
                dtype="datetime64[ns]",
                calculation=lambda row: row["TimePeriodEnd"]
            ),
        ],
    ),
    StateConfig(
        state="Oregon",
        state_abbreviation="OR",
        source_filepath="case_data/Oregon.xlsx",
        target_filepath="output/OR_schools.xlsx",
        source_sheet_name="Data",
        filter_values_file="filters/OR_schools_filter.xlsx",
        filter_values_file_fuzzy_match_on=["SchoolName"],
        nces_id_lookup_file="nces_lookups/OR_schools_nces_lookup.xlsx",
        nces_id_lookup_file_fuzzy_match_on=["SchoolName"],
        column_mappings=[
            ColumnMapping(
                target_column="StateName",
                dtype=pd.StringDtype(),
                constant="Oregon"),
            ColumnMapping(
                target_column="StateAbbrev",
                dtype=pd.StringDtype(),
                constant="OR"),
            ColumnMapping(
                target_column="DataLevel",
                dtype=pd.StringDtype(),
                constant="School"),
            ColumnMapping(
                target_column="SchoolName",
                source_column="School Name",
                dtype=pd.StringDtype()),
            ColumnMapping(
                target_column="ActiveCasesStudents",
                source_column="Students",
                dtype=pd.Int64Dtype()),
            ColumnMapping(
                target_column="ActiveCasesStaff",
                source_column="Staff/Volunteer Cases",
                dtype=pd.Int64Dtype()),
            ColumnMapping(
                target_column="TimePeriodInterval",
                dtype=pd.StringDtype(),
                constant="Weekly"),
            ColumnMapping(
                target_column="TimePeriodEnd",
                source_column="Report Date",
                dtype="datetime64"),
            ColumnMapping(
                target_column="TimePeriodStart",
                dtype="datetime64[ns]",
                calculation=lambda row: row["TimePeriodEnd"] - \
                pd.to_timedelta(7, unit="d")
            ),
        ],
    ),
    StateConfig(
        state="North Carolina",
        state_abbreviation="NC",
        source_filepath="case_data/North Carolina.xlsx",
        target_filepath="output/NC_schools.xlsx",
        source_sheet_name="North Carolina Data",
        filter_values_file="filters/NC_schools_filter.xlsx",
        filter_values_file_fuzzy_match_on=["SchoolName"],
        nces_id_lookup_file="nces_lookups/NC_schools_nces_lookup.xlsx",
        nces_id_lookup_file_fuzzy_match_on=["SchoolName"],
        column_mappings=[
            ColumnMapping(
                target_column="StateName",
                dtype=pd.StringDtype(),
                constant="North Carolina"),
            ColumnMapping(
                target_column="StateAbbrev",
                dtype=pd.StringDtype(),
                constant="NC"),
            ColumnMapping(
                target_column="DataLevel",
                dtype=pd.StringDtype(),
                constant="School"),
            ColumnMapping(
                target_column="SchoolName",
                source_column="Facility",
                dtype=pd.StringDtype()),
            ColumnMapping(
                target_column="ActiveCasesStaff",
                source_column="Staff Cases",
                dtype=pd.Int64Dtype()),
            ColumnMapping(
                target_column="ActiveCasesStudents",
                source_column="Children Cases",
                dtype=pd.Int64Dtype()),
            ColumnMapping(
                target_column="ActiveCasesCombined",
                source_column="Total Cases",
                dtype=pd.Int64Dtype()),
            ColumnMapping(
                target_column="TimePeriodInterval",
                dtype=pd.StringDtype(),
                constant="Weekly"),
            ColumnMapping(
                target_column="TimePeriodEnd",
                source_column="Report Date",
                dtype="datetime64"),
            ColumnMapping(
                target_column="TimePeriodStart",
                dtype="datetime64[ns]",
                calculation=lambda row: row["TimePeriodEnd"] - \
                pd.to_timedelta(7, unit="d")
            ),
        ],
    ),


    StateConfig(
        state="New Hampshire",
        state_abbreviation="NH",
        source_filepath="case_data/New Hampshire.xlsx",
        target_filepath="output/NH_schools.xlsx",
        source_sheet_name="New Hampshire Data",
        filter_values_file="filters/NH_schools_filter.xlsx",
        filter_values_file_fuzzy_match_on=["SchoolName"],
        nces_id_lookup_file="nces_lookups/NH_schools_nces_lookup.xlsx",
        nces_id_lookup_file_fuzzy_match_on=["SchoolName"],
        column_mappings=[
            ColumnMapping(
                target_column="StateName",
                dtype=pd.StringDtype(),
                constant="New Hampshire"),
            ColumnMapping(
                target_column="StateAbbrev",
                dtype=pd.StringDtype(),
                constant="NH"),
            ColumnMapping(
                target_column="DataLevel",
                dtype=pd.StringDtype(),
                constant="School"),
            ColumnMapping(
                target_column="SchoolName",
                source_column="School Name",
                dtype=pd.StringDtype()),
            ColumnMapping(
                target_column="ActiveCasesCombined",
                source_column="Active Cases",
                dtype=pd.Int64Dtype()),
            ColumnMapping(
                target_column="TimePeriodInterval",
                dtype=pd.StringDtype(),
                constant="Daily"),
            ColumnMapping(
                target_column="TimePeriodEnd",
                source_column="Report Date",
                dtype="datetime64"),
            ColumnMapping(
                target_column="TimePeriodStart",
                dtype="datetime64[ns]",
                calculation=lambda row: row["TimePeriodEnd"]
            ),
        ],
    ),

    StateConfig(
        state="Massachusetts",
        state_abbreviation="MA",
        source_filepath="case_data/Massachusetts_CaseData.xlsx",
        target_filepath="output/MA_districts.xlsx",
        source_sheet_name="Massachusetts",
        filter_values_file="filters/MA_districts_filter.xlsx",
        filter_values_file_fuzzy_match_on=["DistrictName"],
        nces_id_lookup_file="nces_lookups/MA_districts_nces_lookup.xlsx",
        nces_id_lookup_file_fuzzy_match_on=["DistrictName"],
        column_mappings=[
            ColumnMapping(
                target_column="StateName",
                dtype=pd.StringDtype(),
                constant="Massachusetts"),
            ColumnMapping(
                target_column="StateAbbrev",
                dtype=pd.StringDtype(),
                constant="MA"),
            ColumnMapping(
                target_column="DataLevel",
                dtype=pd.StringDtype(),
                constant="District"),
            ColumnMapping(
                target_column="DistrictName",
                source_column="DistrictName",
                dtype=pd.StringDtype(),
                filter_values=[
                    "Greenfield Commonwealth Virtual District",
                    "TEC Connections Academy Commonwealth Virtual School District",
                ]),
            ColumnMapping(
                target_column="NewCasesStudents",
                source_column="StudentCases",
                dtype=pd.Int64Dtype()),
            ColumnMapping(
                target_column="NewCasesStaff",
                source_column="StaffCases",
                dtype=pd.Int64Dtype()),
            ColumnMapping(
                target_column="TimePeriodInterval",
                dtype=pd.StringDtype(),
                constant="Weekly"),
            ColumnMapping(
                target_column="TimePeriodEnd",
                source_column="WeekEndDate",
                dtype="datetime64"),
            ColumnMapping(
                target_column="TimePeriodStart",
                dtype="datetime64[ns]",
                calculation=lambda row: row["TimePeriodEnd"] - \
                pd.to_timedelta(7, unit="d")
            ),
        ],
    ),

    StateConfig(
        state="Louisiana",
        state_abbreviation="LA",
        source_filepath="case_data/Louisiana.xlsx",
        target_filepath="output/LA_districts.xlsx",
        source_sheet_name="Louisiana",
        filter_values_file="filters/LA_districts_filter.xlsx",
        filter_values_file_fuzzy_match_on=["DistrictName"],
        nces_id_lookup_file="nces_lookups/LA_districts_nces_lookup.xlsx",
        nces_id_lookup_file_fuzzy_match_on=["DistrictName"],
        column_mappings=[
            ColumnMapping(
                target_column="StateName",
                dtype=pd.StringDtype(),
                constant="Louisiana"),
            ColumnMapping(
                target_column="StateAbbrev",
                dtype=pd.StringDtype(),
                constant="LA"),
            ColumnMapping(
                target_column="DataLevel",
                dtype=pd.StringDtype(),
                constant="District"),
              ColumnMapping(
                target_column="DistrictName",
                source_column="Parish Name",
                dtype=pd.StringDtype(),
                filter_values=[
                    "Grand Total",
                ]),
            ColumnMapping(
                target_column="CumulativeCasesStaff",
                source_column="Total Cases: Faculty/Staff/Volunteer",
                dtype="object",
                converter_dict={
                    "1-4": "1-4",
                }),
            ColumnMapping(
                target_column="CumulativeCasesStudents",
                source_column="Total Cases: Student",
                dtype="object",
                converter_dict={
                    "1-4": "1-4",
                }),
            ColumnMapping(
                target_column="NewCasesStaff",
                source_column="Cases Reported During Current Reporting Period: Faculty/Staff/Volunteer",
                dtype="object",
                converter_dict={
                    "1-4": "1-4",
                }),
            ColumnMapping(
                target_column="NewCasesStudents",
                source_column="Cases Reported During Current Reporting Period: Student",
                dtype="object",
                converter_dict={
                    "1-4": "1-4",
                }),
            ColumnMapping(
                target_column="TimePeriodInterval",
                dtype=pd.StringDtype(),
                constant="Weekly"),
            ColumnMapping(
                target_column="TimePeriodEnd",
                source_column="Report Date",
                dtype="datetime64"),
            ColumnMapping(
                target_column="TimePeriodStart",
                dtype="datetime64[ns]",
                calculation=lambda row: row["TimePeriodEnd"] - \
                pd.to_timedelta(7, unit="d")
            ),
        ],
    ),

    StateConfig(
        state="Maryland",
        state_abbreviation="MD",
        source_filepath="case_data/Maryland.xlsx",
        target_filepath="output/MD_schools.xlsx",
        source_sheet_name="Data",
        filter_values_file="filters/MD_schools_filter.xlsx",
        filter_values_file_fuzzy_match_on=["SchoolName"],
        nces_id_lookup_file="nces_lookups/MD_schools_nces_lookup.xlsx",
        nces_id_lookup_file_fuzzy_match_on=["SchoolName"],
        column_mappings=[
            ColumnMapping(
                target_column="StateName",
                dtype=pd.StringDtype(),
                constant="Maryland"),
            ColumnMapping(
                target_column="StateAbbrev",
                dtype=pd.StringDtype(),
                constant="MD"),
            ColumnMapping(
                target_column="DataLevel",
                dtype=pd.StringDtype(),
                constant="School"),
            ColumnMapping(
                target_column="SchoolName",
                source_column="School Name",
                dtype=pd.StringDtype()),
            ColumnMapping(
                target_column="ActiveCasesCombined",
                source_column="Number of Total Cases",
                dtype=pd.Int64Dtype()),
            ColumnMapping(
                target_column="TimePeriodInterval",
                dtype=pd.StringDtype(),
                constant="Weekly"),
            ColumnMapping(
                target_column="TimePeriodEnd",
                source_column="Report Date",
                dtype="datetime64"),
            ColumnMapping(
                target_column="TimePeriodStart",
                dtype="datetime64[ns]",
                calculation=lambda row: row["TimePeriodEnd"] - \
                pd.to_timedelta(7, unit="d")
            ),
        ],
    ),
    StateConfig(
        state="Colorado",
        state_abbreviation="CO",
        source_filepath="case_data/Colorado.xlsx",
        target_filepath="output/CO_schools.xlsx",
        source_sheet_name="Use for Data Hub",
        filter_values_file="filters/CO_schools_filter.xlsx",
        filter_values_file_fuzzy_match_on=["SchoolName"],
        nces_id_lookup_file="nces_lookups/CO_schools_nces_lookup.xlsx",
        nces_id_lookup_file_fuzzy_match_on=["SchoolName"],
        column_mappings=[
            ColumnMapping(
                target_column="StateName",
                dtype=pd.StringDtype(),
                constant="Colorado"),
            ColumnMapping(
                target_column="StateAbbrev",
                dtype=pd.StringDtype(),
                constant="CO"),
            ColumnMapping(
                target_column="DataLevel",
                dtype=pd.StringDtype(),
                constant="School"),
            ColumnMapping(
                target_column="SchoolName",
                source_column="SchoolName",
                dtype=pd.StringDtype(),
                filter_values=[
                    "",
                ]),
            ColumnMapping(
                target_column="NewCasesStaff",
                source_column="NewCasesStaff",
                dtype=pd.Int64Dtype()),
            ColumnMapping(
                target_column="NewCasesStudents",
                source_column="NewCasesStudents",
                dtype=pd.Int64Dtype()),
            ColumnMapping(
                target_column="NewCasesCombined",
                source_column="NewCasesCombined",
                dtype=pd.Int64Dtype()),
            ColumnMapping(
                target_column="TimePeriodStart",
                source_column="TimePeriodStart",
                dtype="datetime64"),
            ColumnMapping(
                target_column="TimePeriodEnd",
                source_column="TimePeriodEnd",
                dtype="datetime64",
            ),
        ],
    ),

    StateConfig(
        state="Maine",
        state_abbreviation="ME",
        source_filepath="case_data/Maine.xlsx",
        target_filepath="output/ME_schools.xlsx",
        source_sheet_name="Maine Data (without totals)",
        filter_values_file="filters/ME_schools_filter.xlsx",
        filter_values_file_fuzzy_match_on=["SchoolName"],
        nces_id_lookup_file="nces_lookups/ME_schools_nces_lookup.xlsx",
        nces_id_lookup_file_fuzzy_match_on=["SchoolName"],
        column_mappings=[
            ColumnMapping(
                target_column="StateName",
                dtype=pd.StringDtype(),
                constant="Maine"),
            ColumnMapping(
                target_column="StateAbbrev",
                dtype=pd.StringDtype(),
                constant="ME"),
            ColumnMapping(
                target_column="DataLevel",
                dtype=pd.StringDtype(),
                constant="School"),
            ColumnMapping(
                target_column="SchoolName",
                source_column="School Name",
                dtype=pd.StringDtype(),
                filter_values=[
                    "Maine Virtual Academy",
                ]),
            ColumnMapping(
                target_column="ActiveCasesCombined",
                source_column="Number of Cases Reported in Last 30 Days",
                dtype="object",
                converter_dict={
                    "Fewer than 5": "1-4",
                }),
            ColumnMapping(
                target_column="TimePeriodInterval",
                dtype=pd.StringDtype(),
                constant="Weekly"),
            ColumnMapping(
                target_column="TimePeriodEnd",
                source_column="Report Date",
                dtype="datetime64"),
            ColumnMapping(
                target_column="TimePeriodStart",
                dtype="datetime64[ns]",
                calculation=lambda row: row["TimePeriodEnd"] - \
                pd.to_timedelta(7, unit="d")
            ),
        ],
    ),

    StateConfig(
        state="Kentucky",
        state_abbreviation="KY",
        source_filepath="case_data/Kentucky.xlsx",
        target_filepath="output/KY_schools.xlsx",
        source_sheet_name="Kentucky Data Schools Only",
        filter_values_file="filters/KY_schools_filter.xlsx",
        filter_values_file_fuzzy_match_on=["SchoolName", "DistrictName"],
        nces_id_lookup_file="nces_lookups/KY_schools_nces_lookup.xlsx",
        nces_id_lookup_file_fuzzy_match_on=["SchoolName", "DistrictName"],
        column_mappings=[
            ColumnMapping(
                target_column="StateName",
                dtype=pd.StringDtype(),
                constant="Kentucky"),
            ColumnMapping(
                target_column="StateAbbrev",
                dtype=pd.StringDtype(),
                constant="KY"),
            ColumnMapping(
                target_column="DataLevel",
                dtype=pd.StringDtype(),
                constant="School"),
            ColumnMapping(
                target_column="SchoolName",
                source_column="School Name",
                dtype=pd.StringDtype(),
                filter_values=[
                    "Unknown",
                    "",
                    "* \"# Cases Reported Today\" represents the number of new student/staff cases reported since the last",
                    "published KDPH Official COVID-19 School Report. These numbers do not necessarily represent newly",
                    "reported in the last 14 days. These numbers do not necessarily represent newly",
                    "* \"# Cases Reported Today\" represents the number of new student/staff cases reported since",
                    "COVID-19.",
                    "the last published KDPH Official COVID-19 School Report. These numbers do not necessarily"
                ]),
            ColumnMapping(
                target_column="DistrictName",
                source_column="School District",
                dtype=pd.StringDtype(),
                filter_values=[
                    "Unknown",
                    "Totals"
                ]),
            ColumnMapping(
                target_column="NewCasesStudents",
                source_column="# Student Cases Reported Today",
                dtype=pd.Int64Dtype()),
            ColumnMapping(
                target_column="TwoWeekPeriodCasesStudents",
                source_column="# Student Cases Reported in Last 14 Days",
                dtype=pd.Int64Dtype()),
            ColumnMapping(
                target_column="CumulativeCasesStudents",
                source_column="# Student Cases Ever Positive",
                dtype=pd.Int64Dtype()),
            ColumnMapping(
                target_column="NewCasesStaff",
                source_column="# Staff Cases Reported Today",
                dtype=pd.Int64Dtype()),
            ColumnMapping(
                target_column="TwoWeekPeriodCasesStaff",
                source_column="# Staff Cases Reported in Last 14 Days",
                dtype=pd.Int64Dtype()),
            ColumnMapping(
                target_column="CumulativeCasesStaff",
                source_column="# Staff Cases Ever Positive",
                dtype=pd.Int64Dtype()),
            ColumnMapping(
                target_column="TimePeriodInterval",
                dtype=pd.StringDtype(),
                constant="Daily"),
            ColumnMapping(
                target_column="TimePeriodEnd",
                source_column="Report Date",
                dtype="datetime64"),
            ColumnMapping(
                target_column="TimePeriodStart",
                dtype="datetime64[ns]",
                calculation=lambda row: row["TimePeriodEnd"]
            ),
        ],
    ),
    StateConfig(
        state="Kentucky",
        state_abbreviation="KY",
        source_filepath="case_data/Kentucky.xlsx",
        target_filepath="output/KY_districts.xlsx",
        source_sheet_name="Kentucky Data Districts Only",
        filter_values_file="filters/KY_districts_filter.xlsx",
        filter_values_file_fuzzy_match_on=["DistrictName"],
        nces_id_lookup_file="nces_lookups/KY_districts_nces_lookup.xlsx",
        nces_id_lookup_file_fuzzy_match_on=["DistrictName"],
        column_mappings=[
            ColumnMapping(
                target_column="StateName",
                dtype=pd.StringDtype(),
                constant="Kentucky"),
            ColumnMapping(
                target_column="StateAbbrev",
                dtype=pd.StringDtype(),
                constant="KY"),
            ColumnMapping(
                target_column="DataLevel",
                dtype=pd.StringDtype(),
                constant="District"),
            ColumnMapping(
                target_column="DistrictName",
                source_column="School District",
                dtype=pd.StringDtype(),
                filter_values=[
                    "Unknown",
                    "Totals"
                ]),
            ColumnMapping(
                target_column="NewCasesStudents",
                source_column="# Student Cases Reported Today",
                dtype=pd.Int64Dtype()),
            ColumnMapping(
                target_column="TwoWeekPeriodCasesStudents",
                source_column="# Student Cases Reported in Last 14 Days",
                dtype=pd.Int64Dtype()),
            ColumnMapping(
                target_column="CumulativeCasesStudents",
                source_column="# Student Cases Ever Positive",
                dtype=pd.Int64Dtype()),
            ColumnMapping(
                target_column="NewCasesStaff",
                source_column="# Staff Cases Reported Today",
                dtype=pd.Int64Dtype()),
            ColumnMapping(
                target_column="TwoWeekPeriodCasesStaff",
                source_column="# Staff Cases Reported in Last 14 Days",
                dtype=pd.Int64Dtype()),
            ColumnMapping(
                target_column="CumulativeCasesStaff",
                source_column="# Staff Cases Ever Positive",
                dtype=pd.Int64Dtype()),
            ColumnMapping(
                target_column="TimePeriodInterval",
                dtype=pd.StringDtype(),
                constant="Daily"),
            ColumnMapping(
                target_column="TimePeriodEnd",
                source_column="Report Date",
                dtype="datetime64"),
            ColumnMapping(
                target_column="TimePeriodStart",
                dtype="datetime64[ns]",
                calculation=lambda row: row["TimePeriodEnd"]

            ),
        ],
    ),
    StateConfig(
        state="Kansas",
        state_abbreviation="KS",
        source_filepath="case_data/Kansas.xlsx",
        target_filepath="output/KS_schools.xlsx",
        source_sheet_name="Data for Kansas",
        filter_values_file="filters/KS_schools_filter.xlsx",
        filter_values_file_fuzzy_match_on=["SchoolName"],
        nces_id_lookup_file="nces_lookups/KS_schools_nces_lookup.xlsx",
        nces_id_lookup_file_fuzzy_match_on=["SchoolName"],
        column_mappings=[
            ColumnMapping(
                target_column="StateName",
                dtype=pd.StringDtype(),
                constant="Kansas"),
            ColumnMapping(
                target_column="StateAbbrev",
                dtype=pd.StringDtype(),
                constant="KS"),
            ColumnMapping(
                target_column="DataLevel",
                dtype=pd.StringDtype(),
                constant="School"),
            ColumnMapping(
                target_column="SchoolName",
                source_column="School Name",
                dtype=pd.StringDtype()),
            ColumnMapping(
                target_column="NewCasesCombined",
                source_column="Cases in Last 14 Days",
                dtype=pd.Int64Dtype()),
            ColumnMapping(
                target_column="TimePeriodInterval",
                dtype=pd.StringDtype(),
                constant="Biweekly"),
            ColumnMapping(
                target_column="TimePeriodStart",
                source_column="TimePeriodStart",
                dtype="datetime64"),
            ColumnMapping(
                target_column="TimePeriodEnd",
                source_column="TimePeriodEnd",
                dtype="datetime64",

            ),
        ],
    ),

    StateConfig(
        state="Arkansas",
        state_abbreviation="AR",
        source_filepath="case_data/Arkansas.xlsx",
        target_filepath="output/AR_districts.xlsx",
        source_sheet_name="Arkansas",
        filter_values_file="filters/AR_districts_filter.xlsx",
        filter_values_file_fuzzy_match_on=["DistrictName"],
        nces_id_lookup_file="nces_lookups/AR_districts_nces_lookup.xlsx",
        nces_id_lookup_file_fuzzy_match_on=["DistrictName"],
        column_mappings=[
            ColumnMapping(
                target_column="StateName",
                dtype=pd.StringDtype(),
                constant="Arkansas"),
            ColumnMapping(
                target_column="StateAbbrev",
                dtype=pd.StringDtype(),
                constant="AR"),
            ColumnMapping(
                target_column="DataLevel",
                dtype=pd.StringDtype(),
                constant="District"),
            ColumnMapping(
                target_column="DistrictName",
                source_column="Name",
                dtype=pd.StringDtype(),
                filter_values=[
                    "PRIVATE SCHOOL",
                    "TOTAL PRIVATE",
                    "TOTAL PUBLIC",
                    "ARKANSAS VIRTUAL ACADEMY",
                ]),
            ColumnMapping(
                target_column="ActiveCasesCombined",
                source_column="Active Cases",
                dtype=pd.Int64Dtype()),
            ColumnMapping(
                target_column="CumulativeCasesStaff",
                source_column="Cumulative Faculty/Staff Cases",
                dtype=pd.Int64Dtype(),
                na_values=["--", "."]),
            ColumnMapping(
                target_column="CumulativeCasesStudents",
                source_column="Cumulative Student Cases",
                dtype=pd.Int64Dtype(),
                na_values=["--", "."]),
            ColumnMapping(
                target_column="CumulativeCasesCombined",
                source_column="Cumulative Total",
                dtype=pd.Int64Dtype()),
            ColumnMapping(
                target_column="TimePeriodEnd",
                source_column="Date",
                dtype="datetime64"),
            ColumnMapping(
                target_column="TimePeriodStart",
                dtype="datetime64",
                constant="6/15/2020",

            ),
        ],
    ),

    StateConfig(
        state="Connecticut",
        state_abbreviation="CT",
        source_filepath="case_data/Connecticut.xlsx",
        target_filepath="output/CT_schools.xlsx",
        source_sheet_name="Data for Connecticut",
        filter_values_file="filters/CT_schools_filter.xlsx",
        filter_values_file_fuzzy_match_on=["SchoolName", "DistrictName"],
        nces_id_lookup_file="nces_lookups/CT_schools_nces_lookup.xlsx",
        nces_id_lookup_file_fuzzy_match_on=["SchoolName", "DistrictName"],
        column_mappings=[
            ColumnMapping(
                target_column="StateName",
                dtype=pd.StringDtype(),
                constant="Connecticut"),
            ColumnMapping(
                target_column="StateAbbrev",
                dtype=pd.StringDtype(),
                constant="CT"),
            ColumnMapping(
                target_column="DataLevel",
                dtype=pd.StringDtype(),
                constant="School"),
            ColumnMapping(
                target_column="SchoolName",
                source_column="School Name",
                dtype=pd.StringDtype()),
            ColumnMapping(
                target_column="DistrictName",
                source_column="District",
                dtype=pd.StringDtype()),
            ColumnMapping(
                target_column="ActiveCasesCombined",
                source_column="Total Cases in School",
                dtype="object",
                converter_dict={
                    "<6": "1-5"
                }
            ),
            ColumnMapping(
                target_column="TimePeriodInterval",
                dtype=pd.StringDtype(),
                constant="Weekly"),
            ColumnMapping(
                target_column="TimePeriodStart",
                source_column="Report Period Start Date",
                dtype="datetime64"),
            ColumnMapping(
                target_column="TimePeriodEnd",
                source_column="Report Period End Date",
                dtype="datetime64",

            ),
        ],
    ),

    StateConfig(
        state="Delaware",
        state_abbreviation="DE",
        source_filepath="case_data/Delaware.xlsx",
        target_filepath="output/DE_districts.xlsx",
        source_sheet_name="Delaware",
        filter_values_file="filters/DE_districts_filter.xlsx",
        filter_values_file_fuzzy_match_on=["DistrictName"],
        nces_id_lookup_file="nces_lookups/DE_districts_nces_lookup.xlsx",
        nces_id_lookup_file_fuzzy_match_on=["DistrictName"],
        column_mappings=[
            ColumnMapping(
                target_column="StateName",
                dtype=pd.StringDtype(),
                constant="Delaware"),
            ColumnMapping(
                target_column="StateAbbrev",
                dtype=pd.StringDtype(),
                constant="DE"),
            ColumnMapping(
                target_column="DataLevel",
                dtype=pd.StringDtype(),
                constant="District"),
            ColumnMapping(
                target_column="DistrictName",
                source_column="District or Setting",
                dtype=pd.StringDtype(),
                filter_values=[
                    "Private Schools (Combined Total)",
                    "Charter Schools (Combined Total)",
                ]),
            ColumnMapping(
                target_column="ActiveCasesStudents",
                source_column="In-Person Student Cases During Reporting Period",
                dtype="object",
                converter_dict={
                    "< 11*": "1-10",
                },
                na_values=["Not shown*", "."]),
            ColumnMapping(
                target_column="CumulativeCasesStudents",
                source_column="In-Person Student Cases: Cumulative",
                dtype="object",
                converter_dict={
                    "< 11*": "1-10",
                },
                na_values=["Not shown*", "."]),
            ColumnMapping(
                target_column="ActiveCasesStaff",
                source_column="In-Person Staff Cases During Reporting Period",
                dtype="object",
                converter_dict={
                    "< 11*": "1-10",
                },
                na_values=["Not shown*", "."]),
            ColumnMapping(
                target_column="CumulativeCasesStaff",
                source_column="In-Person Staff Cases: Cumulative",
                dtype="object",
                converter_dict={
                    "< 11*": "1-10",
                },
                na_values=["Not shown*", "."]),
            ColumnMapping(
                target_column="TimePeriodInterval",
                dtype=pd.StringDtype(),
                constant="Weekly"),
            ColumnMapping(
                target_column="TimePeriodEnd",
                source_column="Report Date",
                dtype="datetime64"),
            ColumnMapping(
                target_column="TimePeriodStart",
                dtype="datetime64[ns]",
                calculation=lambda row: row["TimePeriodEnd"] - \
                pd.to_timedelta(7, unit="d")
            ),
        ],
    ),

    StateConfig(
        state="Hawaii",
        state_abbreviation="HI",
        source_filepath="case_data/Hawaii.xlsx",
        target_filepath="output/HI_districts.xlsx",
        source_sheet_name="Data for Hawaii",
        column_mappings=[
            ColumnMapping(
                target_column="StateName",
                dtype=pd.StringDtype(),
                constant="Hawaii"),
            ColumnMapping(
                target_column="StateAbbrev",
                dtype=pd.StringDtype(),
                constant="HI"),
            ColumnMapping(
                target_column="DataLevel",
                dtype=pd.StringDtype(),
                constant="Complex"),
            ColumnMapping(
                target_column="DistrictName",
                source_column="Complex Area",
                dtype=pd.StringDtype()),
            ColumnMapping(
                target_column="NewCasesStaff",
                source_column="Staff COVID Cases",
                dtype=pd.Int64Dtype()),
            ColumnMapping(
                target_column="NewCasesStudents",
                source_column="Student COVID Cases",
                dtype=pd.Int64Dtype()),
            ColumnMapping(
                target_column="TimePeriodInterval",
                dtype=pd.StringDtype(),
                constant="Weekly"),
            ColumnMapping(
                target_column="TimePeriodEnd",
                source_column="Report Date",
                dtype="datetime64"),
            ColumnMapping(
                target_column="TimePeriodStart",
                dtype="datetime64[ns]",
                calculation=lambda row: row["TimePeriodEnd"] - \
                pd.to_timedelta(7, unit="d")

            ),
        ],
    ),
]
